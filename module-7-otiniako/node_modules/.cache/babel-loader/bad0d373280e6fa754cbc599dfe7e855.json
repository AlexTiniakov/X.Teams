{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mac/eth_wallet/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    // data = '';\n    value: function componentWillMount() {\n      var ProjectId = '723c0eab8d2e4f30a10fc4a2ce2a08f9';\n      var networks = ['https://mainnet.infura.io/v3/' + ProjectId, 'https://ropsten.infura.io/v3/' + ProjectId, 'https://rinkeby.infura.io/v3/' + ProjectId, 'https://kovan.infura.io/v3/' + ProjectId, 'https://goerli.infura.io/v3/' + ProjectId, 'http://localhost:7545'];\n      this.setState({\n        networks: networks.map(function (number) {\n          return React.createElement(\"option\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 21\n            },\n            __self: this\n          }, number);\n        })\n      });\n      this.loadBlockchainData(null);\n    }\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var url, web3, accounts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!event) {\n                  url = 'http://localhost:7545';\n                } else {\n                  url = event.target.value;\n                }\n\n                web3 = new Web3(url);\n                this.setState({\n                  web3: web3\n                }); //const network = await web3.eth.net.getNetworkType()\n\n                _context.next = 5;\n                return web3.eth.getAccounts();\n\n              case 5:\n                accounts = _context.sent;\n                console.log('accounts:', accounts);\n                console.log('network:', network);\n                this.setState({\n                  accounts: accounts.map(function (number) {\n                    return React.createElement(\"option\", {\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 43\n                      },\n                      __self: this\n                    }, number);\n                  })\n                }); //[<input type=\"radio\" onChange={this.changeAddr} name=\"accounts\" value={number} id={number} />,<label for={number}> {number}</label>, <br></br>])})\n                //onChange={this.loadBlockchainData}\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function loadBlockchainData(_x) {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      accounts: '',\n      networks: '',\n      balance: '',\n      web3: ''\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"BEST WALLET\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Choose network:  \", React.createElement(\"select\", {\n        onChange: this.loadBlockchainData.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, this.state.networks)), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Choose Account: \", React.createElement(\"select\", {\n        onChange: this.changeAddr.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, this.state.accounts)), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Balance: \", this.state.balance));\n    }\n  }, {\n    key: \"checkNetwork\",\n    value: function checkNetwork(event) {\n      //this.state = { accounts: '' , networks: ''}\n      console.log(this.data);\n    }\n  }, {\n    key: \"changeAddr\",\n    value: function changeAddr(event) {\n      var Addr = event.target.value;\n      console.log(Addr);\n      this.web3.eth.getBalance(Addr, function (err, wei) {\n        bal = web3.utils.fromWei(wei, 'ether');\n      });\n      this.setState({\n        balance: bal\n      });\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/mac/eth_wallet/src/App.js"],"names":["React","Component","Web3","App","ProjectId","networks","setState","map","number","loadBlockchainData","event","url","target","value","web3","eth","getAccounts","accounts","console","log","network","props","state","balance","bind","changeAddr","data","Addr","getBalance","err","wei","bal","utils","fromWei"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Web3 from 'web3'\n\n\nclass App extends Component {\n  // data = '';\n  \n\n  componentWillMount() {\n    const ProjectId = '723c0eab8d2e4f30a10fc4a2ce2a08f9'\n    const networks = [\n      'https://mainnet.infura.io/v3/'+ProjectId,\n      'https://ropsten.infura.io/v3/'+ProjectId,\n      'https://rinkeby.infura.io/v3/'+ProjectId,\n      'https://kovan.infura.io/v3/'+ProjectId,\n      'https://goerli.infura.io/v3/'+ProjectId,\n      'http://localhost:7545'\n    ]\n    this.setState({networks: networks.map((number) =>\n      <option>{number}</option>)})\n    this.loadBlockchainData(null)\n  }\n\n  async loadBlockchainData(event) {\n    let url;\n    if (!event) {\n       url = 'http://localhost:7545'\n    }\n    else {\n       url = event.target.value\n    }\n\n    const web3 = new Web3(url)\n    this.setState({web3: web3})\n\n    //const network = await web3.eth.net.getNetworkType()\n  \n    const accounts = await web3.eth.getAccounts()\n\n    console.log('accounts:', accounts)\n    console.log('network:', network)\n    this.setState({accounts: accounts.map((number) => <option>{number}</option>)})\n    //[<input type=\"radio\" onChange={this.changeAddr} name=\"accounts\" value={number} id={number} />,<label for={number}> {number}</label>, <br></br>])})\n    \n    \n\n    //onChange={this.loadBlockchainData}\n    \n  }\n\n  constructor(props) {\n    super(props)\n    this.state = { accounts: '' , networks: '', balance: '', web3: ''}\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>BEST WALLET</h1>\n        <p>Choose network:  <select onChange={this.loadBlockchainData.bind(this)}>{this.state.networks}</select></p>\n        <p>Choose Account: <select onChange={this.changeAddr.bind(this)}>{this.state.accounts}</select></p>\n        <p>Balance: {this.state.balance}</p>\n      </div>\n\n\n    );\n  }\n\n   checkNetwork(event){\n     //this.state = { accounts: '' , networks: ''}\n     console.log(this.data)\n   }\n  \n   changeAddr(event) {\n    const Addr = event.target.value\n    console.log(Addr)\n    this.web3.eth.getBalance(Addr, (err, wei) => {\n      bal = web3.utils.fromWei(wei, 'ether');\n    })\n    this.setState({balance: bal})\n   }\n\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}