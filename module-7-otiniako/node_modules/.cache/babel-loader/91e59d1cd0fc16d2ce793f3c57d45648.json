{"ast":null,"code":"import _toConsumableArray from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mac/eth_wallet/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport { PassThrough } from 'stream';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    // data = '';\n    value: function componentWillMount() {\n      var ProjectId = '723c0eab8d2e4f30a10fc4a2ce2a08f9';\n      var networks = ['http://localhost:7545', 'https://mainnet.infura.io/v3/' + ProjectId, 'https://ropsten.infura.io/v3/' + ProjectId, 'https://rinkeby.infura.io/v3/' + ProjectId, 'https://kovan.infura.io/v3/' + ProjectId, 'https://goerli.infura.io/v3/' + ProjectId];\n      this.setState({\n        networks: networks.map(function (number) {\n          return React.createElement(\"option\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 22\n            },\n            __self: this\n          }, number);\n        })\n      });\n      this.loadBlockchainData(null);\n    }\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var url, web3;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!event) {\n                  url = 'http://localhost:7545';\n                } else {\n                  url = event.target.value;\n                }\n\n                web3 = new Web3(url);\n                this.setState({\n                  web3: web3\n                }); //const accounts = this.state.users\n                //console.log('accounts', accounts)\n                //this.setState({accounts: accounts})\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function loadBlockchainData(_x) {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      accounts: '',\n      networks: '',\n      balance: '',\n      web3: Web3,\n      users: [],\n      privkey: '',\n      cur_user: ''\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"BEST WALLET\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Choose network:  \", React.createElement(\"select\", {\n        onChange: this.loadBlockchainData.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, this.state.networks)), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Choose Account: \", React.createElement(\"select\", {\n        onChange: this.changeAddr.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, this.state.accounts)), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Balance: \", this.state.balance), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"C\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043D\\u043E\\u0432\\u044B\\u0439 \\u0430\\u0434\\u0440\\u0435\\u0441\\u0441\",\n        onClick: this.newAddr.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \" \\u041F\\u0440\\u0438\\u0432\\u0430\\u0442\\u043D\\u044B\\u0439 \\u043A\\u043B\\u044E\\u0447 (hex)\", React.createElement(\"input\", {\n        type: \"password\",\n        name: \"privkey\",\n        value: this.state.privkey,\n        onChange: this.onPasswordChange.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"\\u0418\\u043C\\u043F\\u043E\\u0440\\u0442\",\n        onClick: this.importKey.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"onPasswordChange\",\n    value: function onPasswordChange(event) {\n      this.setState({\n        privkey: event.target.value\n      });\n    }\n  }, {\n    key: \"importKey\",\n    value: function importKey(event) {\n      console.log('privkey', this.state.privkey);\n      var account;\n\n      try {\n        account = this.state.web3.eth.accounts.privateKeyToAccount(this.state.privkey);\n        console.log('account', account);\n        var users = [account].concat(_toConsumableArray(this.state.users));\n        this.setState({\n          users: users\n        });\n        var accounts = [React.createElement(\"option\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, account.address)].concat(_toConsumableArray(this.state.accounts));\n        this.setState({\n          accounts: accounts\n        });\n        this.setState({\n          cur_user: account\n        });\n        this.getBal(account);\n      } catch (e) {\n        console.log('error', e);\n      }\n    }\n  }, {\n    key: \"getBal\",\n    value: function getBal(account) {\n      var _this2 = this;\n\n      var web3 = this.state.web3;\n      var bal;\n      web3.eth.getBalance(account.address, function (err, wei) {\n        bal = web3.utils.fromWei(wei, 'ether');\n\n        _this2.setState({\n          balance: bal\n        });\n\n        console.log('balance:', bal);\n      });\n    }\n  }, {\n    key: \"checkNetwork\",\n    value: function checkNetwork(event) {\n      //this.state = { accounts: '' , networks: ''}\n      console.log(this.data);\n    }\n  }, {\n    key: \"changeAddr\",\n    value: function changeAddr(event) {\n      var _this3 = this;\n\n      var Addr = event.target.value; //console.log(this.state.web3)\n\n      var web3 = this.state.web3;\n      console.log(\"Addr\", Addr);\n      var bal;\n      web3.eth.getBalance(Addr, function (err, wei) {\n        bal = web3.utils.fromWei(wei, 'ether');\n\n        _this3.setState({\n          balance: bal\n        });\n      });\n      var accounts = this.state.users;\n      var us;\n      accounts.map(function (number) {\n        if (number.address === Addr) {\n          us = number;\n\n          _this3.setState({\n            cur_user: number\n          });\n        }\n      });\n      setTimeout(function () {\n        console.log(\"cur_user:\", _this3.state.cur_user);\n      }, 0);\n      this.getBal(us); //console.log(\"us:\", us)\n    }\n  }, {\n    key: \"newAddr\",\n    value: function newAddr(event) {\n      //console.log(event.target.value)\n      //const accounts = this.state.accounts\n      var web3 = this.state.web3;\n      var account = web3.eth.accounts.create(); //accounts.append(account)\n\n      console.log(account);\n      var users = [account].concat(_toConsumableArray(this.state.users));\n      var accounts = [React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, account.address)].concat(_toConsumableArray(this.state.accounts)); //users.map((user) => {accounts = [<option>{user.address}</option>, ...this.state.accounts]})\n\n      this.setState({\n        users: users\n      });\n      this.setState({\n        cur_user: account\n      });\n      this.setState({\n        accounts: accounts\n      });\n      this.getBal(account);\n      console.log('accounts', this.state.accounts);\n      console.log('users', this.state.users);\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/mac/eth_wallet/src/App.js"],"names":["React","Component","Web3","PassThrough","App","ProjectId","networks","setState","map","number","loadBlockchainData","event","url","target","value","web3","props","state","accounts","balance","users","privkey","cur_user","bind","changeAddr","newAddr","onPasswordChange","importKey","console","log","account","eth","privateKeyToAccount","address","getBal","e","bal","getBalance","err","wei","utils","fromWei","data","Addr","us","setTimeout","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Web3 from 'web3'\nimport { PassThrough } from 'stream';\n\n\nclass App extends Component {\n  // data = '';\n  \n\n  componentWillMount() {\n    const ProjectId = '723c0eab8d2e4f30a10fc4a2ce2a08f9'\n    const networks = [\n      'http://localhost:7545',\n      'https://mainnet.infura.io/v3/'+ProjectId,\n      'https://ropsten.infura.io/v3/'+ProjectId,\n      'https://rinkeby.infura.io/v3/'+ProjectId,\n      'https://kovan.infura.io/v3/'+ProjectId,\n      'https://goerli.infura.io/v3/'+ProjectId\n    ]\n    this.setState({networks: networks.map((number) =>\n      <option>{number}</option>)})\n    this.loadBlockchainData(null)\n  }\n\n  async loadBlockchainData(event) {\n    let url;\n    if (!event) {\n       url = 'http://localhost:7545'\n    }\n    else {\n       url = event.target.value\n    }\n\n    const web3 = new Web3(url)\n    this.setState({web3})\n    //const accounts = this.state.users\n    //console.log('accounts', accounts)\n    //this.setState({accounts: accounts})\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      accounts: '' ,\n      networks: '',\n      balance: '', \n      web3: Web3, \n      users: [], \n      privkey: '',\n      cur_user: ''}\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>BEST WALLET</h1>\n        <p>Choose network:  <select onChange={this.loadBlockchainData.bind(this)}>{this.state.networks}</select></p>\n        <p>Choose Account: <select onChange={this.changeAddr.bind(this)}>{this.state.accounts}</select></p>\n        <p>Balance: {this.state.balance}</p>\n        <input type=\"submit\" value='Cоздать новый адресс' onClick={this.newAddr.bind(this)} />\n          <p><label> Приватный ключ (hex)<input type=\"password\" name=\"privkey\" value={this.state.privkey}\n                            onChange={this.onPasswordChange.bind(this)}/></label><input type=\"submit\" value=\"Импорт\" onClick={this.importKey.bind(this)}/></p>\n        \n      </div>\n\n\n    );\n  }\n  onPasswordChange(event){\n    this.setState({privkey: event.target.value});\n  }\n\n  importKey(event) {\n    console.log('privkey',this.state.privkey)\n    let account;\n    try {\n      account = this.state.web3.eth.accounts.privateKeyToAccount(this.state.privkey);\n      console.log('account', account);\n      var users = [account, ...this.state.users]\n      this.setState({users: users})\n      var accounts = [<option>{account.address}</option>, ...this.state.accounts]\n      this.setState({accounts: accounts})\n      this.setState({cur_user: account})\n      this.getBal(account)\n    }\n    catch(e)  {\n      console.log('error', e);\n    }\n    \n  }\n\n  getBal(account) {\n    const web3 = this.state.web3\n    let bal;\n    web3.eth.getBalance(account.address, (err, wei) => {\n      bal = web3.utils.fromWei(wei, 'ether');\n      this.setState({balance: bal})\n      console.log('balance:', bal)\n      \n    })\n  }\n\n   checkNetwork(event){\n     //this.state = { accounts: '' , networks: ''}\n     console.log(this.data)\n   }\n  \n   changeAddr(event) {\n    const Addr = event.target.value\n    //console.log(this.state.web3)\n    const web3 = this.state.web3\n    console.log(\"Addr\", Addr) \n    let bal;\n    web3.eth.getBalance(Addr, (err, wei) => {\n      bal = web3.utils.fromWei(wei, 'ether');\n      this.setState({balance: bal})\n    })\n    var accounts = this.state.users\n    let us\n    accounts.map((number) => {\n      \n      if (number.address === Addr) {\n        us = number\n        this.setState({cur_user: number})\n      }\n    })\n    setTimeout(()=>{console.log(\"cur_user:\", this.state.cur_user)},0)\n    this.getBal(us)\n    //console.log(\"us:\", us)\n   }\n\n   newAddr(event) {\n    //console.log(event.target.value)\n    //const accounts = this.state.accounts\n    const web3 = this.state.web3\n    var account = web3.eth.accounts.create()\n    //accounts.append(account)\n    console.log(account)\n    var users = [account, ...this.state.users]\n    var accounts = [<option>{account.address}</option>, ...this.state.accounts]\n    //users.map((user) => {accounts = [<option>{user.address}</option>, ...this.state.accounts]})\n    this.setState({users: users})\n    this.setState({cur_user: account})\n    this.setState({accounts: accounts})\n    this.getBal(account)\n    console.log('accounts', this.state.accounts)\n    console.log('users', this.state.users)\n   }\n\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}