{"ast":null,"code":"import _toConsumableArray from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/mac/eth_wallet/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mac/eth_wallet/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    // data = '';\n    value: function componentWillMount() {\n      var ProjectId = '723c0eab8d2e4f30a10fc4a2ce2a08f9';\n      var networks = ['http://localhost:7545', 'https://mainnet.infura.io/v3/' + ProjectId, 'https://ropsten.infura.io/v3/' + ProjectId, 'https://rinkeby.infura.io/v3/' + ProjectId, 'https://kovan.infura.io/v3/' + ProjectId, 'https://goerli.infura.io/v3/' + ProjectId];\n      this.setState({\n        networks: networks.map(function (number) {\n          return React.createElement(\"option\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 21\n            },\n            __self: this\n          }, number);\n        })\n      });\n      this.loadBlockchainData(null);\n    }\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var _this2 = this;\n\n        var url, web3, accounts, Addr, bal;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!event) {\n                  url = 'http://localhost:7545';\n                } else {\n                  url = event.target.value;\n                }\n\n                web3 = new Web3(url); //console.log(web3)\n\n                this.setState({\n                  web3: web3\n                }); //console.log(url)\n                //const network = await web3.eth.net.getNetworkType()\n\n                _context.next = 5;\n                return web3.eth.getAccounts();\n\n              case 5:\n                accounts = _context.sent;\n                console.log('accounts', this.state.accounts);\n                console.log('users', this.state.users);\n\n                if (accounts.length > 0) {\n                  Addr = accounts[0];\n                  web3.eth.getBalance(Addr, function (err, wei) {\n                    bal = web3.utils.fromWei(wei, 'ether');\n\n                    _this2.setState({\n                      balance: bal\n                    });\n                  }); //console.log(Addr)\n                } else {\n                  this.setState({\n                    balance: \"\"\n                  });\n                } //console.log('accounts:', accounts)\n                //console.log('network:', network)\n\n\n                this.setState({\n                  accounts: accounts.map(function (number) {\n                    return React.createElement(\"option\", {\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 58\n                      },\n                      __self: this\n                    }, number);\n                  })\n                }); //[<input type=\"radio\" onChange={this.changeAddr} name=\"accounts\" value={number} id={number} />,<label for={number}> {number}</label>, <br></br>])})\n                //console.log(this.state)\n                //onChange={this.loadBlockchainData}\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function loadBlockchainData(_x) {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      accounts: '',\n      networks: '',\n      balance: '',\n      web3: Web3,\n      users: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"BEST WALLET\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Choose network:  \", React.createElement(\"select\", {\n        onChange: this.loadBlockchainData.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, this.state.networks)), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Choose Account: \", React.createElement(\"select\", {\n        onChange: this.changeAddr.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, this.state.accounts)), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Balance: \", this.state.balance), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"C\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043D\\u043E\\u0432\\u044B\\u0439 \\u0430\\u0434\\u0440\\u0435\\u0441\\u0441\",\n        onClick: this.newAddr.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"checkNetwork\",\n    value: function checkNetwork(event) {\n      //this.state = { accounts: '' , networks: ''}\n      console.log(this.data);\n    }\n  }, {\n    key: \"changeAddr\",\n    value: function changeAddr(event) {\n      var _this3 = this;\n\n      var Addr = event.target.value; //console.log(this.state.web3)\n\n      var web3 = this.state.web3; //console.log(web3) \n\n      var bal;\n      web3.eth.getBalance(Addr, function (err, wei) {\n        bal = web3.utils.fromWei(wei, 'ether');\n\n        _this3.setState({\n          balance: bal\n        });\n      });\n    }\n  }, {\n    key: \"newAddr\",\n    value: function newAddr(event) {\n      var _this4 = this;\n\n      //console.log(event.target.value)\n      //const accounts = this.state.accounts\n      var web3 = this.state.web3;\n      var account = web3.eth.accounts.create(); //accounts.append(account)\n\n      console.log(account);\n      var users = [account].concat(_toConsumableArray(this.state.users));\n      var accounts = [React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, account.address)].concat(_toConsumableArray(this.state.accounts));\n      users.map(function (user) {\n        accounts = [React.createElement(\"option\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, user.address)].concat(_toConsumableArray(_this4.state.accounts));\n      });\n      this.setState({\n        users: users\n      });\n      this.setState({\n        accounts: accounts\n      });\n      var bal;\n      web3.eth.getBalance(account.address, function (err, wei) {\n        bal = web3.utils.fromWei(wei, 'ether');\n\n        _this4.setState({\n          balance: bal\n        });\n      });\n      console.log('accounts', this.state.accounts);\n      console.log('users', this.state.users);\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/mac/eth_wallet/src/App.js"],"names":["React","Component","Web3","App","ProjectId","networks","setState","map","number","loadBlockchainData","event","url","target","value","web3","eth","getAccounts","accounts","console","log","state","users","length","Addr","getBalance","err","wei","bal","utils","fromWei","balance","props","bind","changeAddr","newAddr","data","account","create","address","user"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Web3 from 'web3'\n\n\nclass App extends Component {\n  // data = '';\n  \n\n  componentWillMount() {\n    const ProjectId = '723c0eab8d2e4f30a10fc4a2ce2a08f9'\n    const networks = [\n      'http://localhost:7545',\n      'https://mainnet.infura.io/v3/'+ProjectId,\n      'https://ropsten.infura.io/v3/'+ProjectId,\n      'https://rinkeby.infura.io/v3/'+ProjectId,\n      'https://kovan.infura.io/v3/'+ProjectId,\n      'https://goerli.infura.io/v3/'+ProjectId\n    ]\n    this.setState({networks: networks.map((number) =>\n      <option>{number}</option>)})\n    this.loadBlockchainData(null)\n  }\n\n  async loadBlockchainData(event) {\n    let url;\n    if (!event) {\n       url = 'http://localhost:7545'\n    }\n    else {\n       url = event.target.value\n    }\n\n    const web3 = new Web3(url)\n    //console.log(web3)\n    this.setState({web3})\n    //console.log(url)\n\n    //const network = await web3.eth.net.getNetworkType()\n  \n    const accounts = await web3.eth.getAccounts()\n    console.log('accounts', this.state.accounts)\n    console.log('users', this.state.users)\n    if (accounts.length > 0) {\n      const Addr = accounts[0]\n      let bal;\n      web3.eth.getBalance(Addr, (err, wei) => {\n        bal = web3.utils.fromWei(wei, 'ether');\n        this.setState({balance: bal})\n      })\n      //console.log(Addr)\n    }\n    else {\n      this.setState({balance: \"\"})\n    }\n    //console.log('accounts:', accounts)\n    //console.log('network:', network)\n    this.setState({accounts: accounts.map((number) => <option>{number}</option>)})\n    //[<input type=\"radio\" onChange={this.changeAddr} name=\"accounts\" value={number} id={number} />,<label for={number}> {number}</label>, <br></br>])})\n    \n    //console.log(this.state)\n\n    //onChange={this.loadBlockchainData}\n    \n  }\n\n  constructor(props) {\n    super(props)\n    this.state = { accounts: '' , networks: '', balance: '', web3: Web3, users: []}\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>BEST WALLET</h1>\n        <p>Choose network:  <select onChange={this.loadBlockchainData.bind(this)}>{this.state.networks}</select></p>\n        <p>Choose Account: <select onChange={this.changeAddr.bind(this)}>{this.state.accounts}</select></p>\n        <p>Balance: {this.state.balance}</p>\n        \n        <input type=\"submit\" value='Cоздать новый адресс' onClick={this.newAddr.bind(this)} />\n        \n        \n      </div>\n\n\n    );\n  }\n\n   checkNetwork(event){\n     //this.state = { accounts: '' , networks: ''}\n     console.log(this.data)\n   }\n  \n   changeAddr(event) {\n    const Addr = event.target.value\n    //console.log(this.state.web3)\n    const web3 = this.state.web3\n    //console.log(web3) \n    let bal;\n    web3.eth.getBalance(Addr, (err, wei) => {\n      bal = web3.utils.fromWei(wei, 'ether');\n      this.setState({balance: bal})\n    })\n    \n   }\n\n   newAddr(event) {\n    //console.log(event.target.value)\n    //const accounts = this.state.accounts\n    const web3 = this.state.web3\n    var account = web3.eth.accounts.create()\n    //accounts.append(account)\n    console.log(account)\n    var users = [account, ...this.state.users]\n    var accounts = [<option>{account.address}</option>, ...this.state.accounts]\n    users.map((user) => {accounts = [<option>{user.address}</option>, ...this.state.accounts]})\n    this.setState({users: users})\n    this.setState({accounts: accounts})\n    let bal;\n      web3.eth.getBalance(account.address, (err, wei) => {\n        bal = web3.utils.fromWei(wei, 'ether');\n        this.setState({balance: bal})\n      })\n    console.log('accounts', this.state.accounts)\n    console.log('users', this.state.users)\n   }\n\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}